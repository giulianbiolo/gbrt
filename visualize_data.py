'''This program is just a visualizer for 3D data generated by my Rust Raytracer.'''
from sys import argv as args
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider



sizez: int = 0
sizex: int = 0
sizey: int = 0


def load_data(filename: str) -> np.ndarray:
    '''This method loads the data from the file and returns it as a numpy array.
       The data is stored as a binary file, and the data type is float32.
       In particular we are talking about a 3D array of shape (n, n, n).
       We infer the shape of the array from the size of the file. [ Size of the file = n * n * n * 4 ]
    '''
    with open(filename, 'rb') as f:
        
        sizex: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        sizey: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        sizez: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        data = np.fromfile(f, dtype=np.float32)
        data = data.reshape((sizez, sizey, sizex))
    return data


def dataslice(data: np.ndarray, slice: int) -> np.ndarray:
    '''This method returns a 2D slice of the 3D array, given the necessary parameters.'''
    return data[:, slice, :]


def plot_data(data: np.ndarray, slice: int) -> None:
    '''This method plots the data as a 2D slice of the 3D array.
       The axis parameter is the axis along which the slice is taken.
       The slice parameter is the index of the slice along the axis.
       The axis parameter can be 0, 1 or 2, corresponding to x, y and z axes respectively.
       The slice parameter can be any integer from 0 to n-1, where n is the size of the array along the axis.
    '''
    data2d: np.ndarray = dataslice(data, slice)
    fig, ax = plt.subplots()
    im = ax.imshow(data2d)
    fig.colorbar(im, ax=ax, label='Interactive colorbar')
    slice_selector = Slider(ax=plt.axes([0.25, 0.1, 0.65, 0.03]), label='Slice', valmin=0, valmax=data.shape[1]-1, valinit=slice, valstep=1)
    def update_plot(val):
        im.set_data(dataslice(data, int(val)))
        fig.canvas.draw_idle()
    slice_selector.on_changed(update_plot)
    plt.show()


def main() -> None:
    '''This is the main method of the program.
       It takes the filename as a command line argument and plots the data.
       We use matplotlib to plot the data using Z axis as the slider.
    '''
    filename: str = args[1]
    data: np.ndarray = load_data(filename)
    print(data.shape)
    plot_data(data, 0)


if __name__ == '__main__':
    main()

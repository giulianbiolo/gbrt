'''This program is just a visualizer for 3D data generated by my Rust Raytracer.'''
from math import pow, sqrt
from sys import argv as args
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from vispy import app, scene, color



def load_data(filename: str) -> np.ndarray:
    '''This method loads the data from the file and returns it as a numpy array.
       The data is stored as a binary file, and the data type is float32.
       In particular we are talking about a 3D array of shape (n, n, n).
       We infer the shape of the array from the size of the file. [ Size of the file = n * n * n * 4 ]
    '''
    with open(filename, 'rb') as f:
        sizex: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        sizey: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        sizez: int = int.from_bytes(f.read(4), byteorder='little')
        f.seek(4, 1)
        data = np.fromfile(f, dtype=np.float32)
        data = data.reshape((sizez, sizex, sizey))
    return data


def dataslice(data: np.ndarray, axis: int, slice: int) -> np.ndarray:
    '''This method returns a 2D slice of the 3D array, given the necessary parameters.'''
    if axis == 0:
        # We are slicing along the x axis. [ XY Plane Slices, we move in the Z direction ]
        return data[slice, :, :]
    elif axis == 1:
        # We are slicing along the y axis. [ YZ Plane Slices, we move in the X direction ]
        return data[:, slice, :]
    elif axis == 2:
        # We are slicing along the z axis. [ XZ Plane Slices, we move in the Y direction ]
        return data[:, :, slice]
    else:
        raise ValueError('Invalid axis parameter')


def plot_data(data: np.ndarray, axis: int, slice: int) -> None:
    '''This method plots the data as a 2D slice of the 3D array.
       The axis parameter is the axis along which the slice is taken.
       The slice parameter is the index of the slice along the axis.
       The axis parameter can be 0, 1 or 2, corresponding to x, y and z axes respectively.
       The slice parameter can be any integer from 0 to n-1, where n is the size of the array along the axis.
    '''
    data2d: np.ndarray = dataslice(data, axis, slice)
    fig, ax = plt.subplots()
    im = ax.imshow(data2d ** 0.125)
    fig.colorbar(im, ax=ax, label='Interactive colorbar')
    slice_selector = Slider(ax=plt.axes([0.25, 0.1, 0.65, 0.03]), label='Slice', valmin=0, valmax=data.shape[axis]-1, valinit=slice, valstep=1)
    axis_selector = Slider(ax=plt.axes([0.25, 0.05, 0.65, 0.03]), label='Axis', valmin=0, valmax=2, valinit=axis, valstep=1)
    def update_plot(val):
        im.set_data(dataslice(data, int(axis_selector.val), int(slice_selector.val)) ** 0.125)
        fig.canvas.draw_idle()

    slice_selector.on_changed(update_plot)
    axis_selector.on_changed(update_plot)

    plt.show()


def plot_3dvoxels(data: np.ndarray) -> None:
    '''This method plots the data as a 3D scatter plot, using vispy.'''
    # Create a canvas with a 3D viewport
    canvas = scene.SceneCanvas(keys='interactive', size=(800, 800), show=True)
    view = canvas.central_widget.add_view()
    view.camera = 'turntable'  # or try 'arcball'

    # create scatter object and fill in the data
    scatter = scene.visuals.Markers()
    # show the points in 3d space, data[0][0][0] means point (0, 0, 0) with value data[0][0][0], and so on.
    # data[z][x][y] is the point (x, y, z) with value data[z][x][y].
    # build the coords array and the colors array
    coords = []
    colors = []
    max_in_data = np.max(data)
    print(max_in_data)
    data = data**0.125 # This helps us visualize the data better, since power drops very quickly with distance.
    viridis_colormap = color.get_colormap('viridis')
    for z in range(data.shape[0]):
        for x in range(data.shape[1]):
            for y in range(data.shape[2]):
                coords.append([x, y, z])
                colors.append(viridis_colormap.map(data[z][x][y]).reshape((4,)))
    coords = np.array(coords)
    colors = np.array(colors)
    scatter.set_data(coords, edge_color=None, face_color=colors, size=10)
    view.add(scatter)
    # Use a 3D camera
    view.camera = scene.cameras.TurntableCamera(parent=view.scene, fov=50, name='Turntable')
    # add a colored 3D axis for orientation
    # scene.visuals.XYZAxis(parent=view.scene)
    app.run()



def main() -> None:
    '''This is the main method of the program.'''
    # take the first argument as the filename
    filename: str = args[1]
    data: np.ndarray = load_data(filename)
    print(data.shape)
    # Now, we have the data. We can plot it.
    plot_data(data, 0, 0)
    plot_3dvoxels(data)


if __name__ == '__main__':
    main()
